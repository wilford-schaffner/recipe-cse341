const swaggerAutogen = require('swagger-autogen')();

const doc = {
  info: {
    title: 'Recipe Manager API',
    description: 'API for managing recipes',
    version: '1.0.0',
  },
  host: process.env.HOST || (process.env.NODE_ENV === 'production' ? 'recipe-cse341.onrender.com' : 'localhost:3000'),
  schemes: [process.env.NODE_ENV === 'production' ? 'https' : 'http'],
  basePath: '/',
  definitions: {
    Recipe: {
      type: 'object',
      properties: {
        _id: {
          type: 'string',
          description: 'Recipe ID (auto-generated by MongoDB)'
        },
        name: {
          type: 'string',
          description: 'Recipe name',
          example: 'Chocolate Chip Cookies'
        },
        servings: {
          type: 'number',
          description: 'Number of servings',
          example: 12
        },
        prepMinutes: {
          type: 'number',
          description: 'Preparation time in minutes',
          example: 15
        },
        cookMinutes: {
          type: 'number',
          description: 'Cooking time in minutes',
          example: 10
        },
        ingredients: {
          type: 'array',
          description: 'List of ingredients',
          items: {
            type: 'object',
            properties: {
              item: {
                type: 'string',
                description: 'Ingredient name',
                example: 'flour'
              },
              quantity: {
                type: 'string',
                description: 'Ingredient quantity',
                example: '2 cups'
              },
              notes: {
                type: 'string',
                description: 'Additional notes',
                example: 'sifted'
              },
              optional: {
                type: 'boolean',
                description: 'Whether ingredient is optional',
                example: false
              }
            }
          }
        },
        steps: {
          type: 'array',
          description: 'Cooking instructions',
          items: {
            type: 'string',
            example: 'Mix all dry ingredients in a large bowl'
          }
        }
      },
      required: ['name', 'servings', 'prepMinutes', 'ingredients', 'steps']
    }
  }
};

const outputFile = './swagger.json';
const endpointsFiles = ['./routes/index.js'];

swaggerAutogen(outputFile, endpointsFiles, doc).then(() => {
  // Post-process to add request body parameters that swagger-autogen misses
  const fs = require('fs');
  const swaggerDoc = JSON.parse(fs.readFileSync(outputFile, 'utf8'));
  
  // Helper function to add request body parameters
  const addRequestBodyParam = (path, method) => {
    if (swaggerDoc.paths[path] && swaggerDoc.paths[path][method]) {
      if (!swaggerDoc.paths[path][method].parameters) {
        swaggerDoc.paths[path][method].parameters = [];
      }
      
      // Check if body parameter already exists
      const hasBodyParam = swaggerDoc.paths[path][method].parameters.some(p => p.in === 'body');
      if (!hasBodyParam) {
        swaggerDoc.paths[path][method].parameters.push({
          name: 'body',
          in: 'body',
          required: true,
          schema: { $ref: '#/definitions/Recipe' }
        });
      }
    }
  };
  
  // Add request body parameters for POST and PUT requests
  addRequestBodyParam('/recipes/', 'post');
  addRequestBodyParam('/recipes/{id}', 'put');
  
  // Write the updated swagger.json
  fs.writeFileSync(outputFile, JSON.stringify(swaggerDoc, null, 2));
  console.log('Swagger documentation generated successfully');
});
