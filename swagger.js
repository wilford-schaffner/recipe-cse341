const swaggerAutogen = require('swagger-autogen')();

const doc = {
  info: {
    title: 'Recipe Manager API',
    description: 'API for managing recipes with comprehensive validation and error handling',
    version: '1.0.0',
    contact: {
      email: 'recipe-api@example.com'
    },
    license: {
      name: 'MIT',
      url: 'https://opensource.org/licenses/MIT'
    }
  },
  host: process.env.HOST || (process.env.NODE_ENV === 'production' ? 'recipe-cse341.onrender.com' : 'localhost:3000'),
  schemes: [process.env.NODE_ENV === 'production' ? 'https' : 'http'],
  basePath: '/',
  tags: [
    {
      name: 'recipes',
      description: 'Operations about recipes'
    }
  ],
  definitions: {
    Recipe: {
      type: 'object',
      properties: {
        _id: {
          type: 'string',
          description: 'Recipe ID (auto-generated by MongoDB)',
          example: '507f1f77bcf86cd799439011'
        },
        name: {
          type: 'string',
          description: 'Recipe name (3-200 characters, cannot be only whitespace)',
          minLength: 3,
          maxLength: 200,
          example: 'Chocolate Chip Cookies'
        },
        servings: {
          type: 'integer',
          description: 'Number of servings',
          minimum: 1,
          maximum: 100,
          example: 12
        },
        prepMinutes: {
          type: 'integer',
          description: 'Preparation time in minutes',
          minimum: 0,
          maximum: 1440,
          example: 15
        },
        cookMinutes: {
          type: 'integer',
          description: 'Cooking time in minutes',
          minimum: 0,
          maximum: 1440,
          example: 10
        },
        ingredients: {
          type: 'array',
          description: 'List of ingredients',
          minItems: 1,
          items: {
            $ref: '#/definitions/Ingredient'
          }
        },
        steps: {
          type: 'array',
          description: 'Cooking instructions (each step 3-1000 characters, cannot be only whitespace)',
          minItems: 1,
          items: {
            type: 'string',
            minLength: 3,
            maxLength: 1000
          },
          example: ['Mix all dry ingredients in a large bowl', 'Add wet ingredients and mix until combined']
        }
      },
      required: ['_id', 'name', 'servings', 'prepMinutes', 'ingredients', 'steps']
    },
    Ingredient: {
      type: 'object',
      properties: {
        item: {
          type: 'string',
          description: 'Ingredient name (1-100 characters)',
          minLength: 1,
          maxLength: 100,
          example: 'flour'
        },
        quantity: {
          type: 'string',
          description: 'Ingredient quantity (1-50 characters, must be positive, cannot be zero, negative, or only whitespace)',
          minLength: 1,
          maxLength: 50,
          example: '2 cups'
        },
        notes: {
          type: 'string',
          description: 'Additional notes (optional, max 200 characters, empty strings are automatically removed)',
          maxLength: 200,
          example: 'sifted'
        },
        optional: {
          type: 'boolean',
          description: 'Whether ingredient is optional',
          example: false
        }
      },
      required: ['item', 'quantity']
    }
  }
};

const outputFile = './swagger.json';
const endpointsFiles = ['./routes/index.js', './routes/recipes.js'];

swaggerAutogen(outputFile, endpointsFiles, doc).then(() => {
  // Post-process to add missing parameters and fix definitions
  const fs = require('fs');
  const swaggerDoc = JSON.parse(fs.readFileSync(outputFile, 'utf8'));
  
  // Remove erroneous POST endpoint from root path
  if (swaggerDoc.paths['/'] && swaggerDoc.paths['/'].post) {
    delete swaggerDoc.paths['/'].post;
  }
  
  // Remove erroneous generic /{id} path
  if (swaggerDoc.paths['/{id}']) {
    delete swaggerDoc.paths['/{id}'];
  }
  
  // Add POST body parameter
  if (swaggerDoc.paths['/recipes/'] && swaggerDoc.paths['/recipes/'].post) {
    swaggerDoc.paths['/recipes/'].post.parameters = [
      {
        name: 'body',
        in: 'body',
        required: true,
        schema: {
          $ref: '#/definitions/Recipe'
        }
      }
    ];
  }
  
  // Add PUT body parameter (append to existing path parameter)
  if (swaggerDoc.paths['/recipes/{id}'] && swaggerDoc.paths['/recipes/{id}'].put) {
    if (!swaggerDoc.paths['/recipes/{id}'].put.parameters) {
      swaggerDoc.paths['/recipes/{id}'].put.parameters = [];
    }
    // Only add body parameter if it doesn't already exist
    const hasBodyParam = swaggerDoc.paths['/recipes/{id}'].put.parameters.some(p => p.in === 'body');
    if (!hasBodyParam) {
      swaggerDoc.paths['/recipes/{id}'].put.parameters.push({
        name: 'body',
        in: 'body',
        required: true,
        schema: {
          $ref: '#/definitions/Recipe'
        }
      });
    }
  }
  
  // Write the corrected swagger.json
  fs.writeFileSync(outputFile, JSON.stringify(swaggerDoc, null, 2));
  console.log('Swagger documentation generated successfully with clean definitions');
});
